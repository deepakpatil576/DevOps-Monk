2. Variables and Shell Expansions

---------------------------------------------------------------------------------------------
User-defined Variables and Parameter expansions
---------------------------------------------------------------------------------------------

- What parameters and variables are ?
- How to create variables and retrive values from them ?

Learn - 
- Create your own variable to store data under convenient names
- Use parameter expansion to retrive that data and use it as the input commands 

Parameter - Any entity that stores values

Typs - 
1. Varibles
2. Positional parameters
3. Special Parameters

---------------------------------------------------------------------------------------------
1. Varibles - "a parameter whose values you can manually change"

#!bin/bash 
variable="name"

example 

#!bin/bash 
student="deepak"
echo "Hello ${student}"


Note - no space between = sign and varible
${student} - Known as shell expansion 

Key points - 
- A paramter is an entity that can store values
- Varible (most common)
- Positional parameters
- Special parameters

- Creating a variable : name=value (No spaces around = sign!)
- Retrieving a value : ${parameter}


---------------------------------------------------------------------------------------------
Shell Variables
---------------------------------------------------------------------------------------------

Learn - 
- Explain the differnce between bourne shell variable and bash shell variable
- Explain the purpose of the PATH, HOME ,USER, HOSTNAME , HOSTTYPE and PS1 shell varibles
- Access the data held in these varibles for yourself

1. bourne shell variable -

- Bourne shell (created by Stephen Bourne 1979)
- 10 in total 

2. bash shell variable - 

- Based on the Bourne shell  , 
- Bourne Again Shell (BASH)
- 95 in total 

---------------------------------------------------------------------------------------------
Common shell variables 

# The PATH variable contains the list of folders that the shell will search for executable files to run as command names 

Run - echo ${PATH}  # To show PATH variables

# The HOME variable is used to store the absolute path to the current user's home directory

Run - echo ${HOME}

dipak.patil@BETWA:~$ echo $HOME
/home/dipak.patil

# The user variable contains the username of the current user

Run - echo "Hello $USER"

dipak.patil@BETWA:~$ echo "Hello $USER"
Hello dipak.patil

# The HOME and USER varibles tell you about the user who is logged in 
# The HOSTNAME and HOSTTYPE varibles tell you about the computer they are using 

# HOSTNAME - computer name
echo "$HOSTNAME"

# HOSTTYPE variable tells you about what type of processor architechure the computer running
echo "$HOSTTYPE"

# The PS1 variable contains the prompt string show in the terminal before each command 
echo "$PS1"

dipak.patil@BETWA:~$ echo "$PS1"
\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ 

example - 
PS1="$: "
source ~/.bashrc

# visit - easypromt.net forcolorfulll promts

# Summary - 

- Shell variables are variables that, insted of being created by you are actually created by the shell
- That there are two types of shell variables - 1.Bourne shell variables 2.Bash shell variables
- We also took a look at some commonally used  variables - HOME PATH USER HOSTNAME HOSTTYPE PS1

---------------------------------------------------------------------------------------------
Parameter Expansion Tricks
---------------------------------------------------------------------------------------------

Learn - 

- Modify the case of your parameter
- Determine the lenght of parameter
- Slice parameter to only output the specific parts you want to work with 

---------------------------------------------------------------------------------------------
name=DiPaK
echo $name
echo ${name}

echo ${name, }
output - diPaK

echo ${name}
output - DiPaK

Note - we can add diffrent formatting 

echo ${name,, }  #All  letters small
output - dipak


echo $USER
output - dipak.patil

echo ${USER^}   #1st letter will be capital
output - Dipak.patil

echo ${USER^^}  #All letter will be capital
output - DIPAK.PATIL

---------------------------------------------------------------------------------------------
- Determine the lenght of parameter
name=DiPaK
echo${name}

echo ${#name}
output - 5 

---------------------------------------------------------------------------------------------
- Slice parameter to only output the specific parts you want to work with 

#Example - 

numbers=0123456789

${parameter:offset:length}^C

echo ${numbers:0:7} #print from 0 to 7
output - 0123456

echo ${numbers:1:5}  #start from 1 to 5
output - 12345

echo ${numbers:3}  # start from 3 till the end
output - 3456789 

echo ${numbers:3:}  #It will give you empty string

echo ${numbers: -3:2}  # for negative number leave a space after number 
output - 78

echo ${numbers: -3}
output - 789

---------------------------------------------------------------------------------------------
Summary - 
- How to use advanced shell parameter
- How to calculate the number of charecters in your variables
- How to slice out a certain set of characters 

${parameter} - Advanced expansion 
$paramter - Does not support advances parameter



---------------------------------------------------------------------------------------------
Command Substitution
---------------------------------------------------------------------------------------------
# Use cases - 

- Use command substitution to save the output of commands in variables 
- Use command substitution to use the output of one command inside another command

syntax -$(command)  similar to parameter expansion
---------------------------------------------------------------------------------------------
vim substitution

#!/bin/bash
time=$(date +%H:%m:%S)
echo "Hello time right now is $time"

chmod 744 substitution
---------------------------------------------------------------------------------------------
Summary -

-  Command substitution is a shell feature that allows you to grab the output of a command and do stuff with it
-  Command substition syntax - $(command)

---------------------------------------------------------------------------------------------
Command Substitution Project
--------------------------------------------------------------------------------------------

vim backupscript

#!bin/bash

echo "Hello, ${User^}"  # Capitalize 1st letter
echo "I will backup your home directory, $HOME"
currentdir=$(pwd)
echo "You are running this script from $currentdir"
echo "Therefore, I will save the back in the $currentdir"
tar -cf $currentdir/my_backup_"$(date +%d-%m-%Y_%H-%M-%S)".tar $HOME/* 2>/dev/null
echo "backup completed successfully"
exit 0 


--------------------------------------------------------------------------------------------
Arithmetic Expansion
--------------------------------------------------------------------------------------------

- How to perform arithmetic operations
- Add, substract,divide and multiply numbers within your sripts
- Perform exponentiation and modulus operation within your scripts
- Explain the impact of the order of precendence of arithmetic operators

#syntax - $((expression))

+-/* - operators 
--------------------------------------------------------------------------------------------

vim arithmetic

#!/bin/bash
echo $((4 + 2))

output - 6
--------------------------------------------------------------------------------------------

vim arithmetic (using varible)

#!/bin/bash

x=4
y=2
echo $(($x + $y))

output - 6
--------------------------------------------------------------------------------------------
#!/bin/bash

x=4
y=2
echo $((x + y))

output - 6 (same output as above)

--------------------------------------------------------------------------------------------
#!/bin/bash

x=4
y=2
echo $((x + y))
echo $((x - y))
echo $((x / y))
echo $((x * y))

output - 
6
2
2
8
--------------------------------------------------------------------------------------------
echo $((2+3*4))

first - multiplication then adddition 

echo $(((2+3)*4))
Now 2+3 opertaion will 1st then multiplication 

echo $((4 **2))
output - 16

echo $((4 / 2))
output - 0

echo $((5 / 2))
output - 2

echo $(( 2.5 + 1))  # It will give an error

Summary - 
- 
- synatx $((expression))
- Operators - + / * 
- Order of precedence

--------------------------------------------------------------------------------------------
Dealing with 
--------------------------------------------------------------------------------------------





















