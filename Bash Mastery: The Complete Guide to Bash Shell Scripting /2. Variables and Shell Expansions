2. Variables and Shell Expansions

---------------------------------------------------------------------------------------------
User-defined Variables and Parameter expansions
---------------------------------------------------------------------------------------------

- What parameters and variables are ?
- How to create variables and retrive values from them ?

Learn - 
- Create your own variable to store data under convenient names
- Use parameter expansion to retrive that data and use it as the input commands 

Parameter - Any entity that stores values

Typs - 
1. Varibles
2. Positional parameters
3. Special Parameters

---------------------------------------------------------------------------------------------
1. Varibles - "a parameter whose values you can manually change"

#!bin/bash 
variable="name"

example 

#!bin/bash 
student="deepak"
echo "Hello ${student}"


Note - no space between = sign and varible
${student} - Known as shell expansion 

Key points - 
- A paramter is an entity that can store values
- Varible (most common)
- Positional parameters
- Special parameters

- Creating a variable : name=value (No spaces around = sign!)
- Retrieving a value : ${parameter}


---------------------------------------------------------------------------------------------
Shell Variables
---------------------------------------------------------------------------------------------

Learn - 
- Explain the differnce between bourne shell variable and bash shell variable
- Explain the purpose of the PATH, HOME ,USER, HOSTNAME , HOSTTYPE and PS1 shell varibles
- Access the data held in these varibles for yourself

1. bourne shell variable -

- Bourne shell (created by Stephen Bourne 1979)
- 10 in total 

2. bash shell variable - 

- Based on the Bourne shell  , 
- Bourne Again Shell (BASH)
- 95 in total 

---------------------------------------------------------------------------------------------
Common shell variables 

# The PATH variable contains the list of folders that the shell will search for executable files to run as command names 

Run - echo ${PATH}  # To show PATH variables

# The HOME variable is used to store the absolute path to the current user's home directory

Run - echo ${HOME}

dipak.patil@BETWA:~$ echo $HOME
/home/dipak.patil

# The user variable contains the username of the current user

Run - echo "Hello $USER"

dipak.patil@BETWA:~$ echo "Hello $USER"
Hello dipak.patil

# The HOME and USER varibles tell you about the user who is logged in 
# The HOSTNAME and HOSTTYPE varibles tell you about the computer they are using 

# HOSTNAME - computer name
echo "$HOSTNAME"

# HOSTTYPE variable tells you about what type of processor architechure the computer running
echo "$HOSTTYPE"

# The PS1 variable contains the prompt string show in the terminal before each command 
echo "$PS1"

dipak.patil@BETWA:~$ echo "$PS1"
\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ 

example - 
PS1="$: "
source ~/.bashrc

# visit - easypromt.net forcolorfulll promts

# Summary - 

- Shell variables are variables that, insted of being created by you are actually created by the shell
- That there are two types of shell variables - 1.Bourne shell variables 2.Bash shell variables
- We also took a look at some commonally used  variables - HOME PATH USER HOSTNAME HOSTTYPE PS1

---------------------------------------------------------------------------------------------
Parameter Expansion Tricks
---------------------------------------------------------------------------------------------

Learn - 

- Modify the case of your parameter
- Determine the lenght of parameter
- Slice parameter to only output the specific parts you want to work with 

---------------------------------------------------------------------------------------------
name=DiPaK
echo $name
echo ${name}

echo ${name, }
output - diPaK

echo ${name}
output - DiPaK

Note - we can add diffrent formatting 

echo ${name,, }  #All  letters small
output - dipak


echo $USER
output - dipak.patil

echo ${USER^}   #1st letter will be capital
output - Dipak.patil

echo ${USER^^}  #All letter will be capital
output - DIPAK.PATIL

---------------------------------------------------------------------------------------------
- Determine the lenght of parameter
name=DiPaK
echo${name}

echo ${#name}
output - 5 

---------------------------------------------------------------------------------------------
- Slice parameter to only output the specific parts you want to work with 

#Example - 

numbers=0123456789

${parameter:offset:length}^C

echo ${numbers:0:7} #print from 0 to 7
output - 0123456

echo ${numbers:1:5}  #start from 1 to 5
output - 12345

echo ${numbers:3}  # start from 3 till the end
output - 3456789 

echo ${numbers:3:}  #It will give you empty string

echo ${numbers: -3:2}  # for negative number leave a space after number 
output - 78

echo ${numbers: -3}
output - 789

---------------------------------------------------------------------------------------------
Summary - 
- How to use advanced shell parameter
- How to calculate the number of charecters in your variables
- How to slice out a certain set of characters 

${parameter} - Advanced expansion 
$paramter - Does not support advances parameter



---------------------------------------------------------------------------------------------
Command Substitution
---------------------------------------------------------------------------------------------
# Use cases - 

- Use command substitution to save the output of commands in variables 
- Use command substitution to use the output of one command inside another command

syntax -$(command)  similar to parameter expansion
---------------------------------------------------------------------------------------------
vim substitution

#!/bin/bash
time=$(date +%H:%m:%S)
echo "Hello time right now is $time"

chmod 744 substitution
---------------------------------------------------------------------------------------------
Summary -

-  Command substitution is a shell feature that allows you to grab the output of a command and do stuff with it
-  Command substition syntax - $(command)

---------------------------------------------------------------------------------------------
Command Substitution Project
--------------------------------------------------------------------------------------------

vim backupscript

#!bin/bash

echo "Hello, ${User^}"  # Capitalize 1st letter
echo "I will backup your home directory, $HOME"
currentdir=$(pwd)
echo "You are running this script from $currentdir"
echo "Therefore, I will save the back in the $currentdir"
tar -cf $currentdir/my_backup_"$(date +%d-%m-%Y_%H-%M-%S)".tar $HOME/* 2>/dev/null
echo "backup completed successfully"
exit 0 


--------------------------------------------------------------------------------------------
Arithmetic Expansion
--------------------------------------------------------------------------------------------

- How to perform arithmetic operations
- Add, substract,divide and multiply numbers within your sripts
- Perform exponentiation and modulus operation within your scripts
- Explain the impact of the order of precendence of arithmetic operators

#syntax - $((expression))

+-/* - operators 
--------------------------------------------------------------------------------------------

vim arithmetic

#!/bin/bash
echo $((4 + 2))

output - 6
--------------------------------------------------------------------------------------------

vim arithmetic (using variable)

#!/bin/bash

x=4
y=2
echo $(($x + $y))

output - 6
--------------------------------------------------------------------------------------------
#!/bin/bash

x=4
y=2
echo $((x + y))

output - 6 (same output as above)

--------------------------------------------------------------------------------------------
#!/bin/bash

x=4
y=2
echo $((x + y))
echo $((x - y))
echo $((x / y))
echo $((x * y))

output - 
6
2
2
8
--------------------------------------------------------------------------------------------
echo $((2+3*4))

first - multiplication then adddition 

echo $(((2+3)*4))
Now 2+3 opertaion will 1st then multiplication 

echo $((4 **2))
output - 16

echo $((4 / 2))
output - 0

echo $((5 / 2))
output - 2

echo $(( 2.5 + 1))  # It will give an error

Summary - 
- 
- synatx $((expression))
- Operators - + / * 
- Order of precedence

--------------------------------------------------------------------------------------------
Dealing with decimal numbers - the bc command
--------------------------------------------------------------------------------------------

- How to use bc command
- Use the bc comamnd to execute the mathematical expressions that require decimal values in your scripts
- Set the scale variable within the bc command to control how many decimal places are given in the output of the bc command


bc - basic calculator

Run - bc

bc 1.07.1
Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006, 2008, 2012-2017 Free Software Foundation, Inc.
This is free software with ABSOLUTELY NO WARRANTY.
For details type `warranty'. 
2 + 2
4
3.2 + 1
4.2
--------------------------------------------------------------------------------------------
example - 1

echo "5/2" | bc
output - 1

example - 2

echo "scale=2"; 5/2 | bc
output 
2.50

# summary 

- The bc command allows us to perform calculations with decimal numbers
- The syantax for the bc commands is: echo "expression" | bc
- you can use the scale variable to control the number of decimal places that are included in the output
- For example echo "scale=5; 10/3" | bc
- in bc command exponentiation syntax is different a ^ b rather than a**b

--------------------------------------------------------------------------------------------------------
Tilde Expansion
--------------------------------------------------------------------------------------------------------

Learn - 
- what is tilde expansion 
- use cases 
- easily access your home directory and the other directory of other users
- easily switch between your current and previous working directories

~ current user home directory 

dipak.patil@BETWA:~$ echo ~
/home/dipak.patil

dipak.patil@BETWA:~$ echo ~aurochs_admin  #to check other users home directory
/home/aurochs_admin

dipak.patil@BETWA:~$ echo ~root
/root

dipak.patil@BETWA:~$ pwd
/home/dipak.patil

dipak.patil@BETWA:/etc$ echo $PWD
/etc

~+ = pwd
~- = old pwd

dipak.patil@BETWA:/etc$ echo $PWD
/etc
dipak.patil@BETWA:/etc$ cd ~-
dipak.patil@BETWA:~$ 

Summary - 

Use case - Tilde expansion within the shell is useful when writing scripts that need to work across multiple directories
By default ~ will expands to the current user's home directory
~+ is the same as $PWD and ~- is the same as $OLDPWD

--------------------------------------------------------------------------------------------------------
Brace Expansion
--------------------------------------------------------------------------------------------------------

- How to use brace expansion generate text that follow particular patterns of your choosing 
- Use brace expansion in commands to massively scale up their effectiveness

string list  - {} 
Range list - 1-100


echo {a,20,deepak,47}
output -  a 2 deepak 47

echo {jan,feb,mar,apr}
output - jan feb mar apr

echo {jan,feb,mar,apr, may} # if there is space then entire string with {}
output - {jan,feb,mar,apr, may}

echo {  jan,feb,mar,apr,may}
output - {  jan,feb,mar,apr,may}

--------------------------------------------------------------------------------------------------------

Range List - 

dipak.patil@BETWA:~$ echo {1..10}
1 2 3 4 5 6 7 8 9 10

dipak.patil@BETWA:~$ echo {10..1}
10 9 8 7 6 5 4 3 2 1

dipak.patil@BETWA:~$ echo {a..z}
a b c d e f g h i j k l m n o p q r s t u v w x y z

dipak.patil@BETWA:~$ echo {1..50}
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50


stepwise 

dipak.patil@BETWA:~$ echo {1..50..3}
1 4 7 10 13 16 19 22 25 28 31 34 37 40 43 46 49

dipak.patil@BETWA:~$ echo {1..Z}  # Not working becouse of sequence is not correct
{1..Z}

dipak.patil@BETWA:~$ echo month{1..12}
month1 month2 month3 month4 month5 month6 month7 month8 month9 month10 month11 month12

dipak.patil@BETWA:~$ echo month{01..12}
month01 month02 month03 month04 month05 month06 month07 month08 month09 month10 month11 month12


dipak.patil@BETWA:~/shell-scripting$ echo month{01..12}/day{01..10}
month01/day01 month01/day02 month01/day03 month01/day04 month01/day05 month01/day06 month01/day07 month01/day08 month01/day09 month01/day10 month02/day01 month02/day02 month02/day03 month02/day04 month02/day05 month02/day06 month02/day07 month02/day08 month02/day09 month02/day10 month03/day01 month03/day02 month03/day03 month03/day04 month03/day05 month03/day06 month03/day07 month03/day08 month03/day09 month03/day10 month04/day01 month04/day02 month04/day03 month04/day04 month04/day05 month04/day06 month04/day07 month04/day08 month04/day09 month04/day10 month05/day01 month05/day02 month05/day03 month05/day04 month05/day05 month05/day06 month05/day07 month05/day08 month05/day09 month05/day10 month06/day01 month06/day02 month06/day03 month06/day04 month06/day05 month06/day06 month06/day07 month06/day08 month06/day09 month06/day10 month07/day01 month07/day02 month07/day03 month07/day04 month07/day05 month07/day06 month07/day07 month07/day08 month07/day09 month07/day10 month08/day01 month08/day02 month08/day03 month08/day04 month08/day05 month08/day06 month08/day07 month08/day08 month08/day09 month08/day10 month09/day01 month09/day02 month09/day03 month09/day04 month09/day05 month09/day06 month09/day07 month09/day08 month09/day09 month09/day10 month10/day01 month10/day02 month10/day03 month10/day04 month10/day05 month10/day06 month10/day07 month10/day08 month10/day09 month10/day10 month11/day01 month11/day02 month11/day03 month11/day04 month11/day05 month11/day06 month11/day07 month11/day08 month11/day09 month11/day10 month12/day01 month12/day02 month12/day03 month12/day04 month12/day05 month12/day06 month12/day07 month12/day08 month12/day09 month12/day10

dipak.patil@BETWA:~/shell-scripting$ echo month{01..05}/day{01..05}.txt
month01/day01.txt month01/day02.txt month01/day03.txt month01/day04.txt month01/day05.txt month02/day01.txt month02/day02.txt month02/day03.txt month02/day04.txt month02/day05.txt month03/day01.txt month03/day02.txt month03/day03.txt month03/day04.txt month03/day05.txt month04/day01.txt month04/day02.txt month04/day03.txt month04/day04.txt month04/day05.txt month05/day01.txt month05/day02.txt month05/day03.txt month05/day04.txt month05/day05.txt

# Summary - 
- There are 2 types of brace expansion
- string list:{1,2,4,deepak,devops}
- range list:{1..1000}
- Followed by required increment: {1..1000..3}
- Use leading zeroes to make sure that all values you expand have the same number of digits:{001..100}

--------------------------------------------------------------------------------------------------------










